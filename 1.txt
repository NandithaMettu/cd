1. Program to implement Parser with Scanner
Ex: To recognize a valid arithmetic expression that uses operator +, -, *, % using lex
and yacc tool

Arith.l:
%{
#include "Arith.tab.h"
%}
%%
[a-zA-Z_][a-zA-Z_0-9]*   { return id; }
[0-9]+(\.[0-9]*)?        { return num; }
[\+\-\*/]                { return op; }
[=;()]                   { return yytext[0]; }
\n                       { return 0; }
.                        { return yytext[0]; }
%%
int yywrap() {
    return 1;
}

Arith.y:
%{
#include <stdio.h>
int valid = 1;
%}
%token num id op
%%
start : id '=' s ';'      { }
     ;

s : id x
  | num x
  | '-' num x
  | '(' s ')' x
  ;

x : op s
  | '-' s
  | 
  ;
%%
int yyerror(char *s) {
    valid = 0;
    printf("\nInvalid expression!\n");
    return 0;
}

int main() {
    printf("\nEnter the expression:\n");
    yyparse();
    if(valid) {
        printf("\nValid expression!\n");
    }
    return 0;
}

ip:
x=a+5;
op:
valid expression!

cmds:
flex Arith.l
bison -d Arith.y
gcc lex.yy.c Arith.tab.c -o calc.exe
calc.exe

---------------------------------------------------------------------------------------------------------

2. Program to implement Parser with Scanner using Yacc/bison generators. Ex: Calculator 

calc.l:
%{
#include <stdio.h>
#include "y.tab.h"
%}

%%
[0-9]+ {
    yylval.dval = atoi(yytext);
    return DIGIT;
}

\n|. return yytext[0];
%%

int yywrap() {
    return 1;
}

calc.y:
%{
/* E -> E + E | E * E | (E) | DIGIT */
#include <stdio.h>
%}

%union {
    int dval;
}

%token <dval> DIGIT
%type <dval> expr
%type <dval> expr1

%%
line : expr '\n' { printf("%d\n", $1); }
     ;

expr : expr '+' expr1 { $$ = $1 + $3; }
     | expr '-' expr1 { $$ = $1 - $3; }
     | expr '*' expr1 { $$ = $1 * $3; }
     | expr '/' expr1 { $$ = $1 / $3; }
     | expr1
     ;

expr1 : '(' expr ')' { $$ = $2; }
      | DIGIT
      ;
%%

int main() {
    yyparse();
    return 0;
}

int yyerror(char *s) {
    printf("%s\n", s);
    return 0;
}

ip:
5+5
op:
10

cmds:
flex calc.l
bison -dy calc.y
gcc lex.yy.c y.tab.c -o calc.exe
calc.exe

----------------------------------------------------------------------------------------------------------

3. Program to find the canonical LR(0) items.

#include <stdio.h>
#include <string.h>

char a[8][5], b[7][5];
int c[12][5];
int w = 0, e = 0, x = 0, y = 0;
int st2[12][2], st3[12];
char sta[12], ch;

void v1(char, int);
void v2(char, int, int, int);

int main() {
    int i, j, k, l = 0, m = 0, p = 1, f = 0, g, v = 0, jj[12];

    printf("\n\n\t*******Enter the Grammar Rules (max=3)*******\n\t");
    for (i = 0; i < 3; i++) {
        gets(a[i]);
        printf("\t");
    }

    // Populate b array with grammar rules containing dots
    for (i = 0; i < 3; i++) {
        for (j = 0; j < strlen(a[i]); j++) {
            for (k = 0; k < strlen(a[i]); k++) {
                if (p == k) {
                    b[l][m] = '.';
                    m += 1;
                    b[l][m] = a[i][k];
                    m += 1;
                } else {
                    b[l][m] = a[i][k];
                    m++;
                }
            }
            p++;
            l++;
            m = 0;
        }
        p = 1;
    }

    // Ensure all productions have a dot
    i = 0;
    while (l != i) {
        int p = 0;
        for (j = 0; j < strlen(b[i]); j++) {
            if (b[i][j] == '.') {
                p++;
            }
        }
        if (p == 0) {
            b[i][strlen(b[i])] = '.';
        }
        i++;
    }

    // Print the states
    i = 0;
    printf("\n\t*******Your States will be*******\n\t");
    while (l != i) {
        printf("%d--> ", i);
        puts(b[i]);
        i++;
        printf("\t\n");
    }

    v1('A', l);
    p = c[0][0];
    m = 0;

    while (m != 6) {
        for (i = 0; i < st3[m]; i++) {
            for (j = 0; j < strlen(b[p]); j++) {
                if (b[p][j] == '.' && ((b[p][j + 1] >= 'A' && b[p][j + 1] <= 'Z') || (b[p][j + 1] >= 'a' && b[p][j + 1] <= 'z'))) {
                    st2[x][0] = m;
                    sta[x] = b[p][j + 1];
                    v2(b[p][j + 1], j, l, f);
                    x++;
                }
            }
            p = c[m][i + 1];
        }
        m++;
        p = c[m][0];
    }

    g = 0;
    p = 0;
    m = 0;
    x = 0;
    getchar();
    return 0;
}

void v1(char ai, int kk) {
    int i, j;
    for (i = 0; i < kk; i++) {
        if (b[i][2] == ai && b[i][1] == '.') {
            c[w][e] = i;
            e++;
            if (b[i][2] >= 'A' && b[i][2] <= 'Z') {
                for (j = 0; j < kk; j++) {
                    if (b[j][0] == ai && b[j][1] == '.') {
                        c[w][e] = j;
                        e++;
                    }
                }
            }
        }
    }
    st3[w] = e;
    w++;
    e = 0;
}

void v2(char ai, int ii, int kk, int tt) {
    int i, j, k;
    for (i = 0; i < kk; i++) {
        if (b[i][ii] == '.' && b[i][ii + 1] == ai) {
            for (j = 0; j < kk; j++) {
                if (b[j][ii + 1] == '.' && b[j][ii] == ai) {
                    c[w][e] = j;
                    e++;
                    st2[tt][1] = j;
                    if (b[j][ii + 2] >= 'A' && b[j][ii + 1] <= 'Z') {
                        for (k = 0; k < kk; k++) {
                            if (b[k][0] == b[j][ii + 2] && b[k][1] == '.') {
                                c[w][e] = k;
                                e++;
                            }
                        }
                    }
                }
                if ((b[i][ii + 1] >= 'A' && b[i][ii + 1] <= 'Z') && tt == 1) {
                    for (k = 0; k < kk; k++) {
                        if (b[k][0] == ai && b[k][1] == '.') {
                            c[w][e] = k;
                            e++;
                        }
                    }
                }
            }
        }
    }
    st3[w] = e;
    w++;
    e = 0;
}



ip:
T->A+B
T->A
A->B
op:
*******Your States will be*******
        0--> T.->AT-.>AT->.AT->A.T->A+T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

1--> T-.>AT->.AT->A.T->A+T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.     

2--> T->.AT->A.T->A+T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

3--> T->A.T->A+T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

4--> T->A+T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

5--> T->A+T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

6--> T->A+T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

7--> T->A+T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

8--> T->A+T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

9--> T.->AT-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

10--> T-.>AT->.AT->A.A.->BA-.>BA->.BA->B.

11--> T->.AT->A.A.->BA-.>BA->.BA->B.

12--> T->A.A.->BA-.>BA->.BA->B.

13--> A.->BA-.>BA->.BA->B.

14--> A-.>BA->.BA->B.

15--> A->.BA->B.

16--> A->B.
----------------------------------------------------------------------------------------------------------
4. Program to implement Symbol Table Management

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
void main()
{
    int i = 0, j = 0, x = 0, n;
    void *p, *add[5];
    char ch, srch, b[15], d[15], c;
    printf("Expression terminated by $:");
    while ((c = getchar()) != '$')
    {
        b[i] = c;
        i++;
    }
    n = i - 1;
    printf("Given Expression:");
    i = 0;
    while (i <= n)
    {
        printf("%c", b[i]);
        i++;
    }
    printf("\n Symbol Table\n");
    printf("Symbol \t addr \t type");
    while (j <= n)
    {
        c = b[j];
        if (isalpha(toascii(c)))
        {
            p = malloc(c);
            add[x] = p;
            d[x] = c;
            printf("\n%c \t %d \t identifier\n", c, p);
            x++;
            j++;
        }
        else
        {
            ch = c;
            if (ch == '+' || ch == '-' || ch == '*' || ch == '=')
            {
                p = malloc(ch);
                add[x] = p;
                d[x] = ch;
                printf("\n %c \t %d \t operator\n", ch, p);
                x++;
                j++;
            }
        }
    }
}

ip:
a*b+c$
op:
Given Expression:a*b+c
 Symbol Table
Symbol   addr    type
a        13112816        identifier

 *       13113512        operator

b        13112928        identifier

 +       13113616        operator

c        13113040        identifier
